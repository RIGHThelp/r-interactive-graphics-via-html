install.packages(c("boot", "foreign", "httpuv", "lattice", "MASS", "Matrix", "mgcv", "nlme", "rpart", "survival", "xtable"))
detach("package:methods", unload=TRUE)
library("methods", lib.loc="C:/Program Files/R/R-3.0.2/library")
install.packages("knitr")
library("rstudio", lib.loc="C:/Program Files/R/R-3.0.2/library")
install.packages("RIGHT")
library("RIGHT", lib.loc="C:/Program Files/R/R-3.0.2/library")
install.packages("rjson")
library("rjson", lib.loc="C:/Program Files/R/R-3.0.2/library")
install.packages("shiny")
install.packages("httpuv")
library("shiny", lib.loc="C:/Program Files/R/R-3.0.2/library")
library("httpuv", lib.loc="C:/Program Files/R/R-3.0.2/library")
install.packages("caTools")
install.packages("caTools")
install.packages("RJSONIO")
install.packages("xtable")
install.packages("digest")
library("caTools", lib.loc="C:/Program Files/R/R-3.0.2/library")
library("httpuv", lib.loc="C:/Program Files/R/R-3.0.2/library")
library("RJSONIO", lib.loc="C:/Program Files/R/R-3.0.2/library")
library("xtable", lib.loc="C:/Program Files/R/R-3.0.2/library")
library("digest", lib.loc="C:/Program Files/R/R-3.0.2/library")
runExample("01_hello")
library(shiney)
library(shiny)
library("rstudio", lib.loc="C:/Program Files/R/R-3.0.3/library")
library("rpart", lib.loc="C:/Program Files/R/R-3.0.3/library")
library("RJSONIO", lib.loc="C:/Program Files/R/R-3.0.3/library")
library("rjson", lib.loc="C:/Program Files/R/R-3.0.3/library")
library("RIGHT", lib.loc="C:/Program Files/R/R-3.0.3/library")
library("caTools", lib.loc="C:/Program Files/R/R-3.0.3/library")
library("xtable", lib.loc="C:/Program Files/R/R-3.0.3/library")
library("httpuv", lib.loc="C:/Program Files/R/R-3.0.3/library")
library("knitr", lib.loc="C:/Program Files/R/R-3.0.3/library")
library("shiny", lib.loc="C:/Program Files/R/R-3.0.3/library")
runExample("01_hello")
runExample("01_hello")
runExample("02_text")
runExample("03_reactivity")
install.packages("formatR")
runServer.RIGHT <- function(expr) {deparse(substitute(expr))}
install.packages("stringr")
library("stringr", lib.loc="C:/Program Files/R/R-3.0.3/library")
runServer.RIGHT({a <- 10; b <- 20; a + b})
str_trim(runServer.RIGHT({a <- 10; b <- 20; a + b}))[c(-1, -5)]
substitute({a <- 10; b <- 20; a + b})
deparse({a <- 10; b <- 20; a + b})
help(depase)
??deparse
a<-substitute({a <- 10; b <- 20; a + b})
a
a[1]
a[2]
a[3]
a[4]
a[5]
a[-1]
substitute({a <- 10; b <- 20; a + b})
substitute({a <- 10; b <- 20; a + b},list(a=1))
deparse(substitute({a <- 10; b <- 20; a + b},list(a=1))_
deparse(substitute({a <- 10; b <- 20; a + b}))
a<-deparse(substitute({a <- 10; b <- 20; a + b}))
a[0]
a[1]
a[2]
typeof(a)
typeof(a[1])
f <- function(x) {
substitute(x)
}
f(1:10)
x<-1
y<-3
f(x+y)
f({x+y; x+1})
f<-fuction(){}
f<-fuction(){
f<-fuction(){
f<-fuction(){
f<-fuction()
f<-fuction(){ substitute(a+b+z)}
f <- function() {
a <- 1
b <- 2
substitute(a + b + z)
}
f()
f <- function() {
a <- 1
b <- 2
substitute(a + b + z)
}
f<-function(){
substitute(a+b+z)
a<-1
b<-1
substitute(a+b+z)
}
f()
substitute(a+b+z)
}
f<-function(){
substitute(a+b+z)
a<-2
b<-1
substitute(a+b+z)
}
f
f()
f()
f<-function(){
c<-substitute(a+b+z)
a<-2
b<-1
substitute(a+b+z)
}
f()
f<-function(){
c<-substitute(a+b+z)
c
a<-2
b<-1
substitute(a+b+z)
}
f()
f<-function(){
c<-substitute(a+b+z)
c
a<-2
b<-1
//  substitute(a+b+z)
}
f<-function(){
c<-substitute(a+b+z)
c
a<-2
b<-1
#  substitute(a+b+z)
}
f()
f<-function(){
substitute(a+b+z)
a<-2
b<-1
#  substitute(a+b+z)
}
f()
substitute(a+b+z)
runServer.RIGHT <- function(expr) {deparse(substitute(expr))}
runServer.RIGHT({a <- 10; b <- 20; a + b})
runServer.RIGHT <- function(expr) {
temp<-deparse(substitute(expr))
print(temp)
}
runServer.RIGHT({a <- 10; b <- 20; a + b})
runServer.RIGHT <- function(expr) {deparse(substitute(expr))}
runServer.RIGHT({plot(price~carat,subArray,type="p")
lines(price ~ carat, fitArray)
hist(color, subArray)
pie(cut, subArray)})
a<-deparse(substitute({plot(price~carat,subArray,type="p")
+                  lines(price ~ carat, fitArray)
+                  hist(color, subArray)
+                  pie(cut, subArray)}))
a
a[1]
a[2]
a[3]
x <- Theoph$Time
y <- Theoph$conc
x <- Theoph$Time[1:50]
y <- Theoph$conc[1:50]
p<-cbind(x,y)
View(p)
View(p)
p<-data.frame(p)
View(p)
obj<-lm(y~x,p)
xRange <- range(x)
xArray <- seq(xRange[1], xRange[2], length.out = length(x))
yArray <- predict(obj, data.frame(x = xArray))
output <- list("regArr", data.frame(xx = xArray, yy = yArray))
oitput
output
seq(xRange[1], xRange[2], length.out = length(x))
seq(1,10,5)
seq(1,10,2)
View(p)
length(x)
seq(1,10,length.out=5)
plot(xArray,yArray)
plot(xArray,obj)
plot(x,y)
expr<-deparse(substitute(x <- Theoph$Time[!input$mainArr1]
y <- Theoph$conc[!input$mainArr1]
p <- cbind(x, y)
p <- data.frame(p)
obj <- lm(y ~ x, p)
xRange <- range(x)
xArray <- seq(xRange[1], xRange[2], length.out = length(x))
yArray <- predict(obj, data.frame(x = xArray))
output <- list("regArr", data.frame(xx = xArray, yy = yArray))))
expr<-deparse(substitute({x <- Theoph$Time[!input$mainArr1]
y <- Theoph$conc[!input$mainArr1]
p <- cbind(x, y)
p <- data.frame(p)
obj <- lm(y ~ x, p)
xRange <- range(x)
xArray <- seq(xRange[1], xRange[2], length.out = length(x))
yArray <- predict(obj, data.frame(x = xArray))
output <- list("regArr", data.frame(xx = xArray, yy = yArray))}))
expr<-deparse(substitute({x <- Theoph$Time[!input$mainArr1]
y <- Theoph$conc[!input$mainArr1]
p <- cbind(x, y)
p <- data.frame(p)
obj <- lm(y ~ x, p)
xRange <- range(x)
xArray <- seq(xRange[1], xRange[2], length.out = length(x))
yArray <- predict(obj, data.frame(x = xArray))
output <- list("regArr", data.frame(xx = xArray, yy = yArray))}))
expr
writeLines("abc")
writeLines("abc",con = file.path(temp.R"))
getwd()
writeLines("abc",con = file.path("C:/Users/jooyo/Documentstemp.R"))
writeLines("abc",con = file.path("C:/Users/jooyo/Documents/temp.R"))
writeLines("abc",con = file.path("C:/Users/jooyo/Documents/aaa.R"))
writeLines("abc",con = file.path("C:/Users/jooyo/aaa.txt"))
writeLines("abc")
writeLines("def")
writeLines(con = file.path("C:/Users/jooyo/aaa.txt"))
body<-str_trim(expr)[c(-1,-11)]
body
writeLines(body,con = file.path("C:/Users/jooyo/aaa.txt"))
length(expr)
body<-str_trim(expr)[c(-1,-length(expr))]
runServer.RIGHT <- function(expr={},
dir=tempfile()) {
temp<-deparse(substitute(expr))
body<-str_trim(temp)[c(-1,-length(temp))]
#  print(temp)
writeLines(c("library(shiny)
shinyServer(function(input, output) {
output$content <- reactive({
if (length(input$mainArr1) != 0) {
if (length(input$mainArr1) > 1) {",
body,
con = file.path(dir, "server.R"))
}
runServer.RIGHT <- function(expr={},
dir=tempfile()) {
temp<-deparse(substitute(expr))
body<-str_trim(temp)[c(-1,-length(temp))]
#  print(temp)
writeLines(c("library(shiny)
shinyServer(function(input, output) {
output$content <- reactive({
if (length(input$mainArr1) != 0) {
if (length(input$mainArr1) > 1) {",
body,
con = file.path(dir, "server.R"))
}
runServer.RIGHT <- function(expr={},
dir=tempfile()) {
temp<-deparse(substitute(expr))
body<-str_trim(temp)[c(-1,-length(temp))]
#  print(temp)
writeLines(c("library(shiny)
shinyServer(function(input, output) {
output$content <- reactive({
if (length(input$mainArr1) != 0) {
if (length(input$mainArr1) > 1) {",
body,
con = file.path(dir, "server.R"))
return()
}
runServer.RIGHT <- function(expr={},
dir=tempfile()) {
temp<-deparse(substitute(expr))
body<-str_trim(temp)[c(-1,-length(temp))]
#  print(temp)
writeLines(c("library(shiny)
shinyServer(function(input, output) {
output$content <- reactive({
if (length(input$mainArr1) != 0) {
if (length(input$mainArr1) > 1) {",
body),
con = file.path(dir, "server.R"))
return()
}
runServer.RIGHT <- function(expr={},
dir=tempfile()) {
temp<-deparse(substitute(expr))
body<-str_trim(temp)[c(-1,-length(temp))]
#  print(temp)
writeLines(c("library(shiny)
shinyServer(function(input, output) {
output$content <- reactive({
if (length(input$mainArr1) != 0) {
if (length(input$mainArr1) > 1) {",
body
"return(output)
} else {
output <- list(-1, -1)
return (output)
}
}
})
})"),
con = file.path(dir, "server.R"))
return()
}
runServer.RIGHT <- function(expr={},
dir=tempfile()) {
temp<-deparse(substitute(expr))
body<-str_trim(temp)[c(-1,-length(temp))]
#  print(temp)
writeLines(c("library(shiny)
shinyServer(function(input, output) {
output$content <- reactive({
if (length(input$mainArr1) != 0) {
if (length(input$mainArr1) > 1) {",
body
"return(output)
} else {
output <- list(-1, -1)
return (output)
}
}
})
})"),
con = file.path(dir, "server.R"))
return()
}
runServer.RIGHT <- function(expr={},
dir=tempfile()) {
temp<-deparse(substitute(expr))
body<-str_trim(temp)[c(-1,-length(temp))]
#  print(temp)
writeLines(c("library(shiny)
shinyServer(function(input, output) {
output$content <- reactive({
if (length(input$mainArr1) != 0) {
if (length(input$mainArr1) > 1) {",
body,
"return(output)
} else {
output <- list(-1, -1)
return (output)
}
}
})
})"),
con = file.path(dir, "server.R"))
return()
}
runServer.RIGHT({x <- Theoph$Time[!input$mainArr1]
y <- Theoph$conc[!input$mainArr1]
p <- cbind(x, y)
p <- data.frame(p)
obj <- lm(y ~ x, p)
xRange <- range(x)
xArray <- seq(xRange[1], xRange[2], length.out = length(x))
yArray <- predict(obj, data.frame(x = xArray))
output <- list("regArr", data.frame(xx = xArray, yy = yArray))})
getwd()
runServer.RIGHT <- function(expr={},
dir=tempfile()) {
temp<-deparse(substitute(expr))
body<-str_trim(temp)[c(-1,-length(temp))]
#  print(temp)
writeLines(c("library(shiny)
shinyServer(function(input, output) {
output$content <- reactive({
if (length(input$mainArr1) != 0) {
if (length(input$mainArr1) > 1) {",
body,
"return(output)
} else {
output <- list(-1, -1)
return (output)
}
}
})
})"),
con = file.path("C:/Users/jooyo/Documents/server.R"))
return()
}
runServer.RIGHT({x <- Theoph$Time[!input$mainArr1]
y <- Theoph$conc[!input$mainArr1]
p <- cbind(x, y)
p <- data.frame(p)
obj <- lm(y ~ x, p)
xRange <- range(x)
xArray <- seq(xRange[1], xRange[2], length.out = length(x))
yArray <- predict(obj, data.frame(x = xArray))
output <- list("regArr", data.frame(xx = xArray, yy = yArray))})
library("devtools", lib.loc="C:/Program Files/R/R-3.1.1/library")
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='right', token='13E55EEE9790A0BFABF9EEDF7E09BF5B', secret='C18dY+5WVZxhsL7/+hEq8Cep0y15ui9rfakbk6YJ')
setwd("./../Desktop/r-interactive-graphics-via-html/inst/examples/example_offload/")
runApp()
library(shiny)
runApp()
runApp()
deployApp()
setwd("./..//example_plot")
getwd()
runApp()
